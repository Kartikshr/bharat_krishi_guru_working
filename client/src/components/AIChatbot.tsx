import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Bot, Send, Loader2, User, Mic, MicOff, Volume2, VolumeX, Globe, MessageCircle, Lightbulb, HelpCircle, Languages, Trash2, Download, Copy } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "@/contexts/LocationContext";
import { useLanguage } from "@/contexts/LanguageContext";

interface Message {
  id: number;
  text: string;
  sender: "user" | "bot";
  timestamp: Date;
  language: 'en' | 'hi' | 'bn' | 'te' | 'ta' | 'gu' | 'mr' | 'kn' | 'ml' | 'pa';
  category?: string;
  confidence?: number;
}

interface QuickQuestion {
  id: number;
  question: string;
  questionHindi: string;
  questionBengali: string;
  questionTelugu: string;
  questionTamil: string;
  questionGujarati: string;
  questionMarathi: string;
  questionKannada: string;
  questionMalayalam: string;
  questionPunjabi: string;
  category: string;
  icon: any;
}

interface ChatSession {
  id: string;
  name: string;
  messages: Message[];
  lastActivity: Date;
  language: string;
}

interface LanguageOption {
  code: 'en' | 'hi' | 'bn' | 'te' | 'ta' | 'gu' | 'mr' | 'kn' | 'ml' | 'pa';
  name: string;
  nativeName: string;
  flag: string;
}

const AIChatbot = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [currentSessionId, setCurrentSessionId] = useState<string>('default');
  const [activeLanguage, setActiveLanguage] = useState<'en' | 'hi' | 'bn' | 'te' | 'ta' | 'gu' | 'mr' | 'kn' | 'ml' | 'pa'>('hi');
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const [autoTranslate, setAutoTranslate] = useState(false);
  const { toast } = useToast();
  const { selectedLocation } = useLocation();
  const { language } = useLanguage();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any>(null);

  const supportedLanguages: LanguageOption[] = [
    { code: 'en', name: 'English', nativeName: 'English', flag: 'ЁЯЗмЁЯЗз' },
    { code: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
    { code: 'te', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'gu', name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr', name: 'Marathi', nativeName: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'kn', name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ml', name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'pa', name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' }
  ];

  const quickQuestions: QuickQuestion[] = [
    {
      id: 1,
      question: "What crops are best for this season?",
      questionHindi: "рдЗрд╕ рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдХреМрди рд╕реА рдлрд╕рд▓реЗрдВ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рд╣реИрдВ?",
      questionBengali: "ржПржЗ ржорзМрж╕рзБржорзЗрж░ ржЬржирзНржп ржХрзЛржи ржлрж╕рж▓ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж▓?",
      questionTelugu: "р░И р░╕р▒Ар░Ьр░ир▒НтАМр░Хр▒Б р░П р░кр░Вр░Яр░▓р▒Б р░Йр░др▒Нр░др░ор░ор▒Ир░ир░╡р░┐?",
      questionTamil: "роЗроирпНрод рокро░рпБро╡родрпНродро┐ро▒рпНроХрпБ роОроирпНрод рокропро┐ро░рпНроХро│рпН роЪро┐ро▒роирпНродро╡рпИ?",
      questionGujarati: "ркЖ ркорлЛрк╕рко ркорк╛ркЯрлЗ ркХркпрк╛ рккрк╛ркХ рк╢рлНрк░рлЗрк╖рлНрка ркЫрлЗ?",
      questionMarathi: "рдпрд╛ рд╣рдВрдЧрд╛рдорд╛рд╕рд╛рдареА рдХреЛрдгрддреА рдкрд┐рдХреЗ рд╕рд░реНрд╡реЛрддреНрддрдо рдЖрд╣реЗрдд?",
      questionKannada: "р▓И р▓Лр▓др│Бр▓╡р▓┐р▓Чр│Ж р▓пр▓╛р▓╡ р▓мр│Жр▓│р│Жр▓Чр▓│р│Б р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐р▓╡р│Ж?",
      questionMalayalam: "р┤И р┤╕р╡Ар┤╕р┤гр┤┐р╡╜ р┤Пр┤др╡Б р┤╡р┤┐р┤│р┤Хр┤│р┤╛р┤гр╡Н р┤ор┤┐р┤Хр┤Ър╡Нр┤Ър┤др╡Н?",
      questionPunjabi: "риЗри╕ риорйМри╕рио ри▓риИ риХри┐ри╣рйЬрйАриЖриВ рилри╕ри▓ри╛риВ ри╕рин ридрйЛриВ ри╡ризрйАриЖ ри╣рии?",
      category: "Seasonal Farming",
      icon: MessageCircle
    },
    {
      id: 2,
      question: "How to control pest attacks naturally?",
      questionHindi: "рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдХреАрдЯ рд╣рдорд▓реЛрдВ рдХреЛ рдХреИрд╕реЗ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ?",
      questionBengali: "ржкрзНрж░рж╛ржХрзГрждрж┐ржХржнрж╛ржмрзЗ ржХрзАржЯржкрждржЩрзНржЧрзЗрж░ ржЖржХрзНрж░ржоржг ржХрзАржнрж╛ржмрзЗ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░ржмрзЗржи?",
      questionTelugu: "р░╕р░╣р░Ьр░Вр░Чр░╛ р░Ър▒Ар░бр░кр▒Ар░бр░▓ р░жр░╛р░бр▒Бр░▓р░ир▒Б р░Ор░▓р░╛ р░ир░┐р░пр░Вр░др▒Нр░░р░┐р░Вр░Ър░╛р░▓р░┐?",
      questionTamil: "роЗропро▒рпНроХрпИропро╛роХ рокрпВроЪрпНроЪро┐ родро╛роХрпНроХрпБродро▓рпНроХро│рпИ роОро╡рпНро╡ро╛ро▒рпБ роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрпБро╡родрпБ?",
      questionGujarati: "ркХрлБркжрк░ркдрлА рк░рлАркдрлЗ ркЬркВркдрлБркУркирк╛ рк╣рлБркорк▓рк╛ркирлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркирк┐ркпркВркдрлНрк░рк┐ркд ркХрк░рк╡рлБркВ?",
      questionMarathi: "рдиреИрд╕рд░реНрдЧрд┐рдХрд░рд┐рддреНрдпрд╛ рдХреАрдЯрдХрд╛рдВрдЪреЗ рд╣рд▓реНрд▓реЗ рдХрд╕реЗ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рд╛рд╡реЗ?",
      questionKannada: "р▓ир│Ир▓╕р▓░р│Нр▓Чр▓┐р▓Хр▓╡р▓╛р▓Чр▓┐ р▓Хр│Ар▓Я р▓жр▓╛р▓│р▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Зр▓Чр│Ж р▓ир▓┐р▓пр▓Вр▓др│Нр▓░р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б?",
      questionMalayalam: "р┤╕р╡Нр┤╡р┤╛р┤нр┤╛р┤╡р┤┐р┤Хр┤ор┤╛р┤пр┤┐ р┤Хр╡Ар┤Яр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Жр┤Хр╡Нр┤░р┤ор┤гр┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤┐р┤Хр╡Нр┤Хр┤╛р┤В?",
      questionPunjabi: "риХрйБрижри░ридрйА ридрйМри░ 'ридрйЗ риХрйАрйЬрйЗ-риориХрйМрйЬри┐риЖриВ рижрйЗ ри╣риори▓ри┐риЖриВ риирйВрй░ риХри┐ри╡рйЗриВ риХри╛римрйВ риХри░риири╛ ри╣рйИ?",
      category: "Pest Control",
      icon: Lightbulb
    },
    {
      id: 3,
      question: "Government schemes for farmers",
      questionHindi: "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ",
      questionBengali: "ржХрзГрж╖ржХржжрзЗрж░ ржЬржирзНржп рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк",
      questionTelugu: "р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б",
      questionTamil: "ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛рой роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН",
      questionGujarati: "ркЦрлЗркбрлВркдрлЛ ркорк╛ркЯрлЗ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ",
      questionMarathi: "рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛",
      questionKannada: "р▓░р│Ир▓др▓░р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б",
      questionMalayalam: "р┤Хр╡╝р┤╖р┤Хр╡╝р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛",
      questionPunjabi: "риХри┐ри╕ри╛риири╛риВ ри▓риИ ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ",
      category: "Government Schemes",
      icon: HelpCircle
    },
    {
      id: 4,
      question: "Soil testing and improvement tips",
      questionHindi: "рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдФрд░ рд╕реБрдзрд╛рд░ рдХреЗ рддрд┐рдкреНрд╕",
      questionBengali: "ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржПржмржВ ржЙржирзНржирждрж┐рж░ ржЯрж┐ржкрж╕",
      questionTelugu: "р░ор░Яр▒Нр░Яр░┐ р░кр░░р▒Ар░Хр▒Нр░╖ р░ор░░р░┐р░пр▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б",
      questionTamil: "роорогрпН рокро░ро┐роЪрпЛродройрпИ рооро▒рпНро▒рпБроорпН роорпЗроорпНрокро╛роЯрпНроЯрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН",
      questionGujarati: "ркорк╛ркЯрлА рккрк░рлАркХрлНрк╖ркг ркЕркирлЗ рк╕рлБркзрк╛рк░ркгрк╛ ркЯрк┐рккрлНрк╕",
      questionMarathi: "рдорд╛рддреА рдЪрд╛рдЪрдгреА рдЖрдгрд┐ рд╕реБрдзрд╛рд░рдгрд╛ рдЯрд┐рдкреНрд╕",
      questionKannada: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓кр▓░р│Ар▓Хр│Нр▓╖р│Ж р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓зр▓╛р▓░р▓гр│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б",
      questionMalayalam: "р┤ор┤гр╡Нр┤гр╡Н р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤и, р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др╡╜ р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛",
      questionPunjabi: "риори┐рй▒риЯрйА рижрйА риЬри╛риВриЪ риЕридрйЗ ри╕рйБризри╛ри░ рижрйЗ риЯри┐рикри╕",
      category: "Soil Health",
      icon: MessageCircle
    },
    {
      id: 5,
      question: "Water conservation techniques",
      questionHindi: "рдЬрд▓ рд╕рдВрд░рдХреНрд╖рдг рддрдХрдиреАрдХреЗрдВ",
      questionBengali: "ржЬрж▓ рж╕ржВрж░ржХрзНрж╖ржг ржХрзМрж╢рж▓",
      questionTelugu: "р░ир▒Ар░Яр░┐ р░╕р░Вр░░р░Хр▒Нр░╖р░г р░кр░жр▒Нр░зр░др▒Бр░▓р▒Б",
      questionTamil: "роирпАро░рпН рокро╛родрпБроХро╛рокрпНрокрпБ роирпБроЯрпНрокроЩрпНроХро│рпН",
      questionGujarati: "рккрк╛ркгрлА рк╕ркВрк░ркХрлНрк╖ркг ркдркХркирлАркХрлЛ",
      questionMarathi: "рдЬрд▓ рд╕рдВрдзрд╛рд░рдг рддрдВрддреНрд░",
      questionKannada: "р▓ир│Ар▓░р▓┐р▓и р▓╕р▓Вр▓░р▓Хр│Нр▓╖р▓гр│Ж р▓др▓Вр▓др│Нр▓░р▓Чр▓│р│Б",
      questionMalayalam: "р┤Ьр┤▓ р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤г р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Х р┤╡р┤┐р┤жр╡Нр┤пр┤Хр╡╛",
      questionPunjabi: "рикри╛ригрйА ри╕рй░ринри╛ри▓ рижрйАриЖриВ ридриХриирйАриХри╛риВ",
      category: "Water Management",
      icon: Lightbulb
    },
    {
      id: 6,
      question: "Market prices and selling tips",
      questionHindi: "рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдмрд┐рдХреНрд░реА рдХреЗ рддрд┐рдкреНрд╕",
      questionBengali: "ржмрж╛ржЬрж╛рж░ ржжрж╛ржо ржПржмржВ ржмрж┐ржХрзНрж░ржпрж╝ ржЯрж┐ржкрж╕",
      questionTelugu: "р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ер░ор▒Нр░ор░Хр░кр▒Б р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б",
      questionTamil: "роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро▒рпНрокройрпИ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН",
      questionGujarati: "ркмркЬрк╛рк░ ркнрк╛рк╡ ркЕркирлЗ рк╡рлЗркЪрк╛ркг ркЯрк┐рккрлНрк╕",
      questionMarathi: "рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдЖрдгрд┐ рд╡рд┐рдХреНрд░реА рдЯрд┐рдкреНрд╕",
      questionKannada: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓ор▓╛р▓░р▓╛р▓Яр▓ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б",
      questionMalayalam: "р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н р┤╡р┤┐р┤▓р┤Хр┤│р╡Бр┤В р┤╡р┤┐р╡╜р┤кр╡Нр┤кр┤и р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр┤│р╡Бр┤В",
      questionPunjabi: "риори╛ри░риХрйАриЯ рижрйЗ ринри╛риЕ риЕридрйЗ ри╡рйЗриЪриг рижрйЗ риЯри┐рикри╕",
      category: "Market Intelligence",
      icon: HelpCircle
    }
  ];

  const getLanguageSpecificQuestion = (question: QuickQuestion, langCode: string): string => {
    switch (langCode) {
      case 'hi': return question.questionHindi;
      case 'bn': return question.questionBengali;
      case 'te': return question.questionTelugu;
      case 'ta': return question.questionTamil;
      case 'gu': return question.questionGujarati;
      case 'mr': return question.questionMarathi;
      case 'kn': return question.questionKannada;
      case 'ml': return question.questionMalayalam;
      case 'pa': return question.questionPunjabi;
      default: return question.question;
    }
  };

  const getWelcomeMessage = (langCode: string, location: string): string => {
    const messages = {
      en: `Hello! I'm your agricultural assistant. I can provide information about farming, crops, diseases, irrigation, fertilizers, pesticides, government schemes, and modern agricultural techniques for ${location}. You can ask me questions in any Indian language!`,
      hi: `рдирдорд╕реНрдХрд╛рд░! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ ${location} рдХреЗ рд▓рд┐рдП рдЦреЗрддреА, рдлрд╕рд▓реЛрдВ, рдмреАрдорд╛рд░рд┐рдпреЛрдВ, рд╕рд┐рдВрдЪрд╛рдИ, рдЙрд░реНрд╡рд░рдХ, рдХреАрдЯрдирд╛рд╢рдХ, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ, рдФрд░ рдЖрдзреБрдирд┐рдХ рдХреГрд╖рд┐ рддрдХрдиреАрдХреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдХрд┐рд╕реА рднреА рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ!`,
      bn: `ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ${location} ржПрж░ ржЬржирзНржп ржЪрж╛рж╖рж╛ржмрж╛ржж, ржлрж╕рж▓, рж░рзЛржЧ, рж╕рзЗржЪ, рж╕рж╛рж░, ржХрзАржЯржирж╛рж╢ржХ, рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк ржПржмржВ ржЖржзрзБржирж┐ржХ ржХрзГрж╖рж┐ ржХрзМрж╢рж▓ рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржпрзЗржХрзЛржирзЛ ржнрж╛рж░рждрзАржпрж╝ ржнрж╛рж╖рж╛ржпрж╝ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи!`,
      te: `р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐ред р░ир▒Зр░ир▒Б ${location} р░Хр▒Лр░╕р░В р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В, р░кр░Вр░Яр░▓р▒Б, р░╡р▒Нр░пр░╛р░зр▒Бр░▓р▒Б, р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓, р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б, р░Хр▒Ар░Яр░ир░╛р░╢р░Хр░╛р░▓р▒Б, р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░Жр░зр▒Бр░ир░┐р░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░жр▒Нр░зр░др▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░╕р░ор░╛р░Ър░╛р░░р░В р░Ер░Вр░жр░┐р░Вр░Ър░Чр░▓р░ир▒Б!`,
      ta: `ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН ${location} роХрпНроХро╛рой ро╡ро┐ро╡роЪро╛ропроорпН, рокропро┐ро░рпНроХро│рпН, роирпЛропрпНроХро│рпН, роирпАро░рпНрокрпНрокро╛роЪройроорпН, роЙро░роЩрпНроХро│рпН, рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐роХро│рпН, роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роиро╡рпАрой ро╡ро┐ро╡роЪро╛роп роирпБроЯрпНрокроЩрпНроХро│рпН рокро▒рпНро▒ро┐роп родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХ роорпБроЯро┐ропрпБроорпН!`,
      gu: `ркиркорк╕рлНркХрк╛рк░! рк╣рлБркВ ркдркорк╛рк░рлЛ ркХрлГрк╖рк┐ рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ ${location} ркорк╛ркЯрлЗ ркЦрлЗркдрлА, рккрк╛ркХ, рк░рлЛркЧрлЛ, рк╕рк┐ркВркЪрк╛ркИ, ркЦрк╛ркдрк░, ркЬркВркдрлБркирк╛рк╢ркХрлЛ, рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркЕркирлЗ ркЖркзрлБркирк┐ркХ ркХрлГрк╖рк┐ ркдркХркирлАркХрлЛ рк╡рк┐рк╢рлЗ ркорк╛рк╣рк┐ркдрлА ркЖрккрлА рк╢ркХрлБркВ ркЫрлБркВ!`,
      mr: `рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рдореА ${location} рд╕рд╛рдареА рд╢реЗрддреА, рдкрд┐рдХреЗ, рд░реЛрдЧ, рд╕рд┐рдВрдЪрди, рдЦрдд, рдХреАрдЯрдХрдирд╛рд╢рдХреЗ, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдЖрдгрд┐ рдЖрдзреБрдирд┐рдХ рд╢реЗрддреА рддрдВрддреНрд░рдЬреНрдЮрд╛рди рдмрджреНрджрд▓ рдорд╛рд╣рд┐рддреА рджреЗрдК рд╢рдХрддреЛ!`,
      kn: `р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х. р▓ир▓╛р▓ир│Б ${location} р▓Чр▓╛р▓Чр▓┐ р▓Хр│Гр▓╖р▓┐, р▓мр│Жр▓│р│Жр▓Чр▓│р│Б, р▓░р│Лр▓Чр▓Чр▓│р│Б, р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐, р▓Чр│Кр▓мр│Нр▓мр▓░р▓Чр▓│р│Б, р▓Хр│Ар▓Яр▓ир▓╛р▓╢р▓Хр▓Чр▓│р│Б, р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Жр▓зр│Бр▓ир▓┐р▓Х р▓Хр│Гр▓╖р▓┐ р▓др▓Вр▓др│Нр▓░р▓Чр▓│ р▓мр▓Чр│Нр▓Чр│Ж р▓ор▓╛р▓╣р▓┐р▓др▓┐ р▓ир│Ар▓бр▓мр▓▓р│Нр▓▓р│Ж!`,
      ml: `р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╕р┤╣р┤╛р┤пр┤Хр┤ир┤╛р┤гр╡Н. р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н ${location} р┤ир╡Бр┤│р╡Нр┤│ р┤Хр╡Гр┤╖р┤┐, р┤╡р┤┐р┤│р┤Хр╡╛, р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛, р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В, р┤╡р┤│р┤Щр╡Нр┤Щр╡╛, р┤Хр╡Ар┤Яр┤ир┤╛р┤╢р┤┐р┤ир┤┐р┤Хр╡╛, р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛, р┤Жр┤зр╡Бр┤ир┤┐р┤Х р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Хр┤╡р┤┐р┤жр╡Нр┤пр┤Хр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤ир╡╜р┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В!`,
      pa: `ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ риЦрйЗридрйАримри╛рйЬрйА ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риорйИриВ ${location} ри▓риИ риЦрйЗридрйА, рилри╕ри▓ри╛риВ, римри┐риори╛ри░рйАриЖриВ, ри╕ри┐рй░риЪри╛риИ, риЦри╛риж, риХрйАрйЬрйЗ-риори╛ри░ рижри╡ри╛риИриЖриВ, ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ риЕридрйЗ риЖризрйБриири┐риХ риЦрйЗридрйА ридриХриирйАриХри╛риВ римри╛ри░рйЗ риЬри╛ригриХри╛ри░рйА рижрйЗ ри╕риХрижри╛ ри╣ри╛риВ!`
    };
    
    return messages[langCode as keyof typeof messages] || messages.en;
  };

  const initializeChat = () => {
    const welcomeMessage: Message = {
      id: 1,
      text: getWelcomeMessage(activeLanguage, selectedLocation),
      sender: "bot",
      timestamp: new Date(),
      language: activeLanguage,
      category: "welcome",
      confidence: 100
    };

    setMessages([welcomeMessage]);
  };

  useEffect(() => {
    initializeChat();
  }, [selectedLocation, activeLanguage]);

  useEffect(() => {
    // Initialize speech recognition if available
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      
      // Set language for speech recognition
      const speechLangMap = {
        'en': 'en-IN',
        'hi': 'hi-IN',
        'bn': 'bn-IN',
        'te': 'te-IN',
        'ta': 'ta-IN',
        'gu': 'gu-IN',
        'mr': 'mr-IN',
        'kn': 'kn-IN',
        'ml': 'ml-IN',
        'pa': 'pa-IN'
      };
      
      recognitionRef.current.lang = speechLangMap[activeLanguage] || 'hi-IN';

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
        toast({
          title: "Voice Recognition Error",
          description: "Could not recognize speech. Please try again.",
          variant: "destructive"
        });
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  }, [activeLanguage]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const detectLanguage = (text: string): 'en' | 'hi' | 'bn' | 'te' | 'ta' | 'gu' | 'mr' | 'kn' | 'ml' | 'pa' => {
    // Enhanced language detection
    const patterns = {
      hi: /[\u0900-\u097F]/,
      bn: /[\u0980-\u09FF]/,
      te: /[\u0C00-\u0C7F]/,
      ta: /[\u0B80-\u0BFF]/,
      gu: /[\u0A80-\u0AFF]/,
      mr: /[\u0900-\u097F]/,
      kn: /[\u0C80-\u0CFF]/,
      ml: /[\u0D00-\u0D7F]/,
      pa: /[\u0A00-\u0A7F]/
    };

    for (const [lang, pattern] of Object.entries(patterns)) {
      if (pattern.test(text)) {
        return lang as any;
      }
    }
    
    return 'en'; // Default to English
  };

  const generateLocalFallback = (query: string, lang: string): string => {
    const responses = {
      en: [
        `For ${selectedLocation}, I recommend consulting local agricultural experts for specific guidance about your query.`,
        `Based on ${selectedLocation} conditions, consider sustainable farming practices and government scheme benefits.`,
        `In ${selectedLocation}, weather-based farming decisions are crucial. Monitor local weather patterns regularly.`,
        `For your area ${selectedLocation}, soil testing and proper fertilizer management can improve crop yields significantly.`,
        `Consider joining farmer groups in ${selectedLocation} for shared knowledge and better market access.`
      ],
      hi: [
        `${selectedLocation} рдХреЗ рд▓рд┐рдП, рдореИрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдиреЗ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░рддрд╛ рд╣реВрдВред`,
        `${selectedLocation} рдХреА рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЯрд┐рдХрд╛рдК рдХреГрд╖рд┐ рдкреНрд░рдерд╛рдУрдВ рдФрд░ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд▓рд╛рднреЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред`,
        `${selectedLocation} рдореЗрдВ, рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рдХреГрд╖рд┐ рдирд┐рд░реНрдгрдп рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИрдВред рд╕реНрдерд╛рдиреАрдп рдореМрд╕рдо рдкреИрдЯрд░реНрди рдХреА рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред`,
        `рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ ${selectedLocation} рдХреЗ рд▓рд┐рдП, рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдФрд░ рдЙрдЪрд┐рдд рдЙрд░реНрд╡рд░рдХ рдкреНрд░рдмрдВрдзрди рдлрд╕рд▓ рдХреА рдкреИрджрд╛рд╡рд╛рд░ рдореЗрдВ рдХрд╛рдлреА рд╕реБрдзрд╛рд░ рдХрд░ рд╕рдХрддрд╛ рд╣реИред`,
        `рд╕рд╛рдЭрд╛ рдЬреНрдЮрд╛рди рдФрд░ рдмреЗрд╣рддрд░ рдмрд╛рдЬрд╛рд░ рдкрд╣реБрдВрдЪ рдХреЗ рд▓рд┐рдП ${selectedLocation} рдореЗрдВ рдХрд┐рд╕рд╛рди рд╕рдореВрд╣реЛрдВ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред`
      ],
      bn: [
        `${selectedLocation} ржПрж░ ржЬржирзНржп, ржЖржорж┐ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж╕ржорзНржкрж░рзНржХрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржирж┐рж░рзНржжрзЗрж╢ржирж╛рж░ ржЬржирзНржп рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮржжрзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржЗред`,
        `${selectedLocation} ржПрж░ ржЕржмрж╕рзНржерж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржЯрзЗржХрж╕ржЗ ржХрзГрж╖рж┐ ржЕржирзБрж╢рзАрж▓ржи ржПржмржВ рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржкрзЗрж░ рж╕рзБржмрж┐ржзрж╛ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржиред`
      ],
      te: [
        `${selectedLocation} р░Хр▒Лр░╕р░В, р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░ир░В р░Хр▒Лр░╕р░В р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░▓р░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░╛р░▓р░ир░┐ р░ир▒Зр░ир▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Бред`,
        `${selectedLocation} р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░╕р▒Нр░ер░┐р░░р░ор▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░жр▒Нр░зр░др▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Х р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓р░ир▒Б р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░Вр░бр░┐ред`
      ],
      ta: [
        `${selectedLocation} роХрпНроХрпБ, роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпБроХрпНроХро╛роХ роЙро│рпНро│рпВро░рпН ро╡ро┐ро╡роЪро╛роп роиро┐рокрпБрогро░рпНроХро│рпИ роЕрогрпБроХрпБрооро╛ро▒рпБ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН.`,
        `${selectedLocation} роиро┐ро▓рпИроорпИроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роиро┐ро▓рпИропро╛рой ро╡ро┐ро╡роЪро╛роп роироЯрпИроорпБро▒рпИроХро│рпН рооро▒рпНро▒рпБроорпН роЕро░роЪрпБ родро┐роЯрпНроЯ роиройрпНроорпИроХро│рпИ роХро░рпБродрпНродро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпНред`
      ],
      gu: [
        `${selectedLocation} ркорк╛ркЯрлЗ, рк╣рлБркВ ркдркорк╛рк░рк╛ рккрлНрк░рк╢рлНрки рк╡рк┐рк╢рлЗ ркЪрлЛркХрлНркХрк╕ ркорк╛рк░рлНркЧркжрк░рлНрк╢рки ркорк╛ркЯрлЗ рк╕рлНркерк╛ркирк┐ркХ ркХрлГрк╖рк┐ ркирк┐рк╖рлНркгрк╛ркдрлЛркирлА рк╕рк▓рк╛рк╣ рк▓рлЗрк╡рк╛ркирлА ркнрк▓рк╛ркоркг ркХрк░рлБркВ ркЫрлБркВ.`,
        `${selectedLocation} ркирлА рккрк░рк┐рк╕рлНркерк┐ркдрк┐ркУркирк╛ ркЖркзрк╛рк░рлЗ, ркЯркХрк╛ркЙ ркХрлГрк╖рк┐ рккрлНрк░ркерк╛ркУ ркЕркирлЗ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркирк╛ рк▓рк╛ркнрлЛ рккрк░ рк╡рк┐ркЪрк╛рк░ ркХрк░рлЛ.`
      ],
      mr: [
        `${selectedLocation} рд╕рд╛рдареА, рдореА рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдмрджреНрджрд▓ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рд░реНрдЧрджрд░реНрд╢рдирд╛рд╕рд╛рдареА рд╕реНрдерд╛рдирд┐рдХ рдХреГрд╖реА рддрдЬреНрдЮрд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреЗрдгреНрдпрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рддреЛ.`,
        `${selectedLocation} рдЪреНрдпрд╛ рдкрд░рд┐рд╕реНрдерд┐рддреАрдЪреНрдпрд╛ рдЖрдзрд╛рд░реЗ, рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреА рдкрджреНрдзрддреА рдЖрдгрд┐ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдВрдЪреЗ рдлрд╛рдпрджреЗ рд╡рд┐рдЪрд╛рд░рд╛рдд рдШреНрдпрд╛.`
      ],
      kn: [
        `${selectedLocation} р▓Чр▓╛р▓Чр▓┐, р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓п р▓мр▓Чр│Нр▓Чр│Ж р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓ир▓Хр│Нр▓Хр▓╛р▓Чр▓┐ р▓╕р│Нр▓ер▓│р│Ар▓п р▓Хр│Гр▓╖р▓┐ р▓др▓Ьр│Нр▓Юр▓░р▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓▓р│Б р▓ир▓╛р▓ир│Б р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓ор▓╛р▓бр│Бр▓др│Нр▓др│Зр▓ир│Ж.`,
        `${selectedLocation} р▓кр▓░р▓┐р▓╕р│Нр▓ер▓┐р▓др▓┐р▓Чр▓│ р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж, р▓╕р│Бр▓╕р│Нр▓ер▓┐р▓░ р▓Хр│Гр▓╖р▓┐ р▓Ер▓нр│Нр▓пр▓╛р▓╕р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓п р▓кр│Нр▓░р▓пр│Лр▓Ьр▓ир▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓Чр▓гр▓┐р▓╕р▓┐.`
      ],
      ml: [
        `${selectedLocation} р┤ир╡Бр┤│р╡Нр┤│, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤ир┤┐р╡╝р┤жр╡Нр┤жр┤┐р┤╖р╡Нр┤Я р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤кр╡Нр┤░р┤╛р┤жр╡Зр┤╢р┤┐р┤Х р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤░р╡Ж р┤╕р┤ор╡Ар┤кр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Юр┤╛р╡╗ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б.`,
        `${selectedLocation} р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р╡╜, р┤╕р╡Бр┤╕р╡Нр┤ер┤┐р┤░ р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤░р╡Ар┤др┤┐р┤Хр┤│р╡Бр┤В р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐ р┤Жр┤ир╡Бр┤Хр╡Вр┤▓р╡Нр┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤кр┤░р┤┐р┤Чр┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.`
      ],
      pa: [
        `${selectedLocation} ри▓риИ, риорйИриВ ридрйБри╣ри╛рибрйЗ ри╕ри╡ри╛ри▓ римри╛ри░рйЗ риЦри╛ри╕ риори╛ри░риЧрижри░ри╕ри╝рии ри▓риИ ри╕риери╛риириХ риЦрйЗридрйАримри╛рйЬрйА риори╛ри╣ри┐ри░ри╛риВ риири╛ри▓ ри╕ри▓ри╛ри╣ риХри░рии рижрйА ри╕ри┐рилри╛ри░ри╕ри╝ риХри░рижри╛ ри╣ри╛риВред`,
        `${selectedLocation} рижрйАриЖриВ ри╕риери┐ридрйАриЖриВ рижрйЗ риЖризри╛ри░ 'ридрйЗ, риЯри┐риХри╛риК риЦрйЗридрйА риЕринри┐риЖри╕ри╛риВ риЕридрйЗ ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ рижрйЗ рилри╛риЗрижри┐риЖриВ 'ридрйЗ ри╡ри┐риЪри╛ри░ риХри░рйЛред`
      ]
    };
    
    const langResponses = responses[lang as keyof typeof responses] || responses.en;
    return langResponses[Math.floor(Math.random() * langResponses.length)];
  };

  const sendMessage = async (messageText?: string) => {
    const queryText = messageText || input;
    if (!queryText.trim()) return;

    const detectedLang = detectLanguage(queryText);
    
    const userMessage: Message = {
      id: Date.now(),
      text: queryText,
      sender: "user",
      timestamp: new Date(),
      language: detectedLang,
      category: "user-query"
    };

    setMessages((prev) => [...prev, userMessage]);
    if (!messageText) setInput("");
    setIsLoading(true);

    try {
      // Call the enhanced Gemini-powered AI assistant API
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: queryText,
          location: selectedLocation,
          language: detectedLang,
          context: messages.slice(-5) // Send last 5 messages for context
        })
      });

      if (!response.ok) {
        throw new Error('AI response failed');
      }

      const data = await response.json();
      
      const botResponse: Message = {
        id: Date.now() + 1,
        text: data.response,
        sender: "bot",
        timestamp: new Date(),
        language: detectedLang,
        category: "ai-response",
        confidence: 95
      };

      setMessages((prev) => [...prev, botResponse]);

      // Text-to-speech for bot response
      if (voiceEnabled && isSpeaking) {
        speakText(data.response, detectedLang);
      }

    } catch (error) {
      console.error("AI Service Error:", error);
      
      // Use enhanced fallback response on API error
      const fallbackResponse: Message = {
        id: Date.now() + 2,
        text: generateLocalFallback(queryText, detectedLang),
        sender: "bot",
        timestamp: new Date(),
        language: detectedLang,
        category: "fallback",
        confidence: 60
      };
      setMessages((prev) => [...prev, fallbackResponse]);
      
      toast({
        title: detectedLang === 'hi' ? "рдХрдиреЗрдХреНрд╢рди рдХреА рд╕рдорд╕реНрдпрд╛" : "Connection Issue",
        description: detectedLang === 'hi' 
          ? "AI рд╕рд╣рд╛рдпрдХ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдирд╣реАрдВ рд╣реЛ рдкрд╛ рд░рд╣рд╛ред рд╕реНрдерд╛рдиреАрдп рд╕рд▓рд╛рд╣ рджреА рдЬрд╛ рд░рд╣реА рд╣реИред"
          : "Could not connect to AI assistant. Providing local advice.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }

    setTimeout(scrollToBottom, 100);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage();
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      const speechLangMap = {
        'en': 'en-IN',
        'hi': 'hi-IN',
        'bn': 'bn-IN',
        'te': 'te-IN',
        'ta': 'ta-IN',
        'gu': 'gu-IN',
        'mr': 'mr-IN',
        'kn': 'kn-IN',
        'ml': 'ml-IN',
        'pa': 'pa-IN'
      };
      recognitionRef.current.lang = speechLangMap[activeLanguage] || 'hi-IN';
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  const speakText = (text: string, lang: string) => {
    if ('speechSynthesis' in window && voiceEnabled) {
      const utterance = new SpeechSynthesisUtterance(text);
      const speechLangMap = {
        'en': 'en-IN',
        'hi': 'hi-IN',
        'bn': 'bn-IN',
        'te': 'te-IN',
        'ta': 'ta-IN',
        'gu': 'gu-IN',
        'mr': 'mr-IN',
        'kn': 'kn-IN',
        'ml': 'ml-IN',
        'pa': 'pa-IN'
      };
      
      utterance.lang = speechLangMap[lang as keyof typeof speechLangMap] || 'hi-IN';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      speechSynthesis.speak(utterance);
    }
  };

  const toggleSpeech = () => {
    if (isSpeaking) {
      speechSynthesis.cancel();
      setIsSpeaking(false);
    } else {
      setVoiceEnabled(!voiceEnabled);
    }
  };

  const askQuickQuestion = (question: QuickQuestion) => {
    const questionText = getLanguageSpecificQuestion(question, activeLanguage);
    sendMessage(questionText);
  };

  const createNewSession = () => {
    const newSessionId = `session-${Date.now()}`;
    const newSession: ChatSession = {
      id: newSessionId,
      name: `Chat ${chatSessions.length + 1}`,
      messages: [],
      lastActivity: new Date(),
      language: activeLanguage
    };
    
    setChatSessions(prev => [...prev, newSession]);
    setCurrentSessionId(newSessionId);
    setMessages([]);
    initializeChat();
  };

  const clearChat = () => {
    setMessages([]);
    initializeChat();
    toast({
      title: activeLanguage === 'hi' ? "рдЪреИрдЯ рд╕рд╛рдлрд╝ рдХрд┐рдпрд╛ рдЧрдпрд╛" : "Chat Cleared",
      description: activeLanguage === 'hi' ? "рдирдИ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ" : "Start a new conversation"
    });
  };

  const exportChat = () => {
    const chatData = {
      location: selectedLocation,
      language: activeLanguage,
      timestamp: new Date().toISOString(),
      messages: messages.map(m => ({
        sender: m.sender,
        text: m.text,
        timestamp: m.timestamp.toISOString(),
        language: m.language,
        confidence: m.confidence
      }))
    };
    
    const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `krishi-guru-chat-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: activeLanguage === 'hi' ? "рдЪреИрдЯ рдирд┐рд░реНрдпрд╛рдд рдХрд┐рдпрд╛ рдЧрдпрд╛" : "Chat Exported",
      description: activeLanguage === 'hi' ? "рдЪреИрдЯ рдЗрддрд┐рд╣рд╛рд╕ рдбрд╛рдЙрдирд▓реЛрдб рдХрд┐рдпрд╛ рдЧрдпрд╛" : "Chat history downloaded"
    });
  };

  const copyMessage = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied",
      description: "Message copied to clipboard"
    });
  };

  const getLanguageFlag = (langCode: string) => {
    const lang = supportedLanguages.find(l => l.code === langCode);
    return lang?.flag || 'ЁЯЗоЁЯЗ│';
  };

  const getLanguageName = (langCode: string) => {
    const lang = supportedLanguages.find(l => l.code === langCode);
    return lang?.nativeName || langCode;
  };

  return (
    <section id="ai-chatbot" className="py-20 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <Bot className="mx-auto h-16 w-16 text-primary mb-4" />
          <h2 className="text-4xl font-bold text-primary mb-4">
            {activeLanguage === 'hi' 
              ? 'AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ / AI Agriculture Assistant'
              : 'AI Agriculture Assistant / AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ'
            }
          </h2>
          <p className="text-xl text-muted-foreground">
            {activeLanguage === 'hi'
              ? `${selectedLocation} рдХреЗ рд▓рд┐рдП 10+ рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ`
              : `Chat with AI assistant in 10+ Indian languages for ${selectedLocation}`
            }
          </p>
        </div>

        <div className="max-w-6xl mx-auto">
          <Card className="shadow-hero">
            <CardHeader className="bg-primary text-primary-foreground">
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <Bot className="h-6 w-6" />
                  Krishi Guru AI Assistant - {selectedLocation}
                </CardTitle>
                
                <div className="flex items-center space-x-2">
                  {/* Language Selector */}
                  <Select value={activeLanguage} onValueChange={(value: any) => setActiveLanguage(value)}>
                    <SelectTrigger className="w-40 bg-primary-foreground/20 border-primary-foreground/30">
                      <SelectValue>
                        <div className="flex items-center">
                          <span className="mr-2">{getLanguageFlag(activeLanguage)}</span>
                          <span className="text-sm">{getLanguageName(activeLanguage)}</span>
                        </div>
                      </SelectValue>
                    </SelectTrigger>
                    <SelectContent>
                      {supportedLanguages.map((lang) => (
                        <SelectItem key={lang.code} value={lang.code}>
                          <div className="flex items-center">
                            <span className="mr-2">{lang.flag}</span>
                            <span>{lang.nativeName}</span>
                            <span className="ml-2 text-xs text-muted-foreground">({lang.name})</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  {/* Voice Controls */}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={toggleSpeech}
                    className="bg-primary-foreground/20 border-primary-foreground/30"
                  >
                    {voiceEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
                  </Button>
                  
                  {/* Chat Controls */}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={clearChat}
                    className="bg-primary-foreground/20 border-primary-foreground/30"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={exportChat}
                    className="bg-primary-foreground/20 border-primary-foreground/30"
                    disabled={messages.length <= 1}
                  >
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              
              {/* Enhanced Stats */}
              <div className="flex items-center space-x-4 text-sm opacity-90">
                <span>Messages: {messages.length}</span>
                <span>тАв</span>
                <span>Language: {getLanguageName(activeLanguage)}</span>
                <span>тАв</span>
                <span>Location: {selectedLocation.split(',')[0]}</span>
                <span>тАв</span>
                <span className={`flex items-center ${voiceEnabled ? 'text-green-300' : 'text-red-300'}`}>
                  {voiceEnabled ? <Volume2 className="w-3 h-3 mr-1" /> : <VolumeX className="w-3 h-3 mr-1" />}
                  Voice {voiceEnabled ? 'ON' : 'OFF'}
                </span>
              </div>
            </CardHeader>
            
            <CardContent className="p-0">
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-0">
                {/* Enhanced Quick Questions Sidebar */}
                <div className="lg:col-span-1 border-r bg-muted/30 p-4">
                  <h3 className="font-semibold mb-3 text-sm flex items-center">
                    <Lightbulb className="w-4 h-4 mr-2" />
                    {activeLanguage === 'hi' ? 'рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди' : 'Quick Questions'}
                  </h3>
                  <div className="space-y-2">
                    {quickQuestions.map((q) => (
                      <Button
                        key={q.id}
                        variant="ghost"
                        size="sm"
                        onClick={() => askQuickQuestion(q)}
                        className="w-full justify-start text-left h-auto p-2 text-xs hover:bg-primary/10"
                        disabled={isLoading}
                      >
                        <q.icon className="w-3 h-3 mr-2 flex-shrink-0" />
                        <span className="line-clamp-2">
                          {getLanguageSpecificQuestion(q, activeLanguage)}
                        </span>
                      </Button>
                    ))}
                  </div>
                  
                  {/* Language Quick Switch */}
                  <div className="mt-4 pt-4 border-t">
                    <h4 className="text-xs font-medium mb-2 text-muted-foreground">Quick Language Switch</h4>
                    <div className="grid grid-cols-2 gap-1">
                      {supportedLanguages.slice(0, 6).map((lang) => (
                        <Button
                          key={lang.code}
                          variant={activeLanguage === lang.code ? "default" : "outline"}
                          size="sm"
                          onClick={() => setActiveLanguage(lang.code)}
                          className="text-xs p-1 h-8"
                        >
                          <span className="mr-1">{lang.flag}</span>
                          {lang.code.toUpperCase()}
                        </Button>
                      ))}
                    </div>
                  </div>
                  
                  <div className="mt-4 pt-4 border-t">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={createNewSession}
                      className="w-full text-xs mb-2"
                    >
                      {activeLanguage === 'hi' ? 'рдирдИ рдЪреИрдЯ' : 'New Chat'}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={exportChat}
                      className="w-full text-xs"
                      disabled={messages.length <= 1}
                    >
                      <Download className="w-3 h-3 mr-1" />
                      {activeLanguage === 'hi' ? 'рдирд┐рд░реНрдпрд╛рдд' : 'Export'}
                    </Button>
                  </div>
                </div>

                {/* Enhanced Main Chat Area */}
                <div className="lg:col-span-3">
                  <ScrollArea className="h-96 p-4">
                    <div className="space-y-4">
                      {messages.map((message) => (
                        <div
                          key={message.id}
                          className={`flex ${
                            message.sender === "user" ? "justify-end" : "justify-start"
                          }`}
                        >
                          <div
                            className={`flex items-start gap-2 max-w-[85%] ${
                              message.sender === "user" ? "flex-row-reverse" : ""
                            }`}
                          >
                            <div
                              className={`p-2 rounded-full ${
                                message.sender === "user"
                                  ? "bg-primary text-primary-foreground"
                                  : "bg-nature-medium text-white"
                              }`}
                            >
                              {message.sender === "user" ? (
                                <User className="h-4 w-4" />
                              ) : (
                                <Bot className="h-4 w-4" />
                              )}
                            </div>
                            <div
                              className={`p-3 rounded-lg ${
                                message.sender === "user"
                                  ? "bg-primary text-primary-foreground"
                                  : "bg-muted"
                              }`}
                            >
                              <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.text}</p>
                              <div className="flex items-center justify-between mt-2">
                                <span className="text-xs opacity-70">
                                  {message.timestamp.toLocaleTimeString()}
                                </span>
                                <div className="flex items-center space-x-1">
                                  <Badge variant="outline" className="text-xs">
                                    <span className="mr-1">{getLanguageFlag(message.language)}</span>
                                    {getLanguageName(message.language)}
                                  </Badge>
                                  {message.confidence && (
                                    <Badge variant="outline" className="text-xs">
                                      {message.confidence}%
                                    </Badge>
                                  )}
                                  {message.sender === "bot" && (
                                    <>
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => speakText(message.text, message.language)}
                                        className="h-6 w-6 p-0"
                                        disabled={!voiceEnabled}
                                      >
                                        <Volume2 className="h-3 w-3" />
                                      </Button>
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => copyMessage(message.text)}
                                        className="h-6 w-6 p-0"
                                      >
                                        <Copy className="h-3 w-3" />
                                      </Button>
                                    </>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                      {isLoading && (
                        <div className="flex justify-start">
                          <div className="flex items-start gap-2 max-w-[85%]">
                            <div className="p-2 rounded-full bg-nature-medium text-white">
                              <Bot className="h-4 w-4" />
                            </div>
                            <div className="p-3 rounded-lg bg-muted">
                              <div className="flex items-center gap-2">
                                <Loader2 className="h-4 w-4 animate-spin" />
                                <span className="text-sm">
                                  {activeLanguage === 'hi' ? 'рд╕реЛрдЪ рд░рд╣рд╛ рд╣реВрдБ...' : 
                                   activeLanguage === 'bn' ? 'ржнрж╛ржмржЫрж┐...' :
                                   activeLanguage === 'te' ? 'р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...' :
                                   activeLanguage === 'ta' ? 'ропрпЛроЪро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН...' :
                                   activeLanguage === 'gu' ? 'рк╡рк┐ркЪрк╛рк░рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ...' :
                                   activeLanguage === 'mr' ? 'рд╡рд┐рдЪрд╛рд░ рдХрд░рдд рдЖрд╣реЗ...' :
                                   activeLanguage === 'kn' ? 'р▓пр│Лр▓Ър▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж...' :
                                   activeLanguage === 'ml' ? 'р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...' :
                                   activeLanguage === 'pa' ? 'ри╕рйЛриЪ ри░ри┐ри╣ри╛ ри╣ри╛риВ...' :
                                   'Thinking...'}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    <div ref={messagesEndRef} />
                  </ScrollArea>
                  
                  {/* Enhanced Input Area */}
                  <div className="p-4 border-t bg-muted/30">
                    <form onSubmit={handleSubmit} className="space-y-3">
                      <div className="flex gap-2">
                        <div className="flex-1 relative">
                          <Input
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            placeholder={
                              activeLanguage === 'hi' 
                                ? "рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдпрд╣рд╛рдБ рдЯрд╛рдЗрдк рдХрд░реЗрдВ... (рдХрд┐рд╕реА рднреА рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛ рдореЗрдВ)"
                                : activeLanguage === 'bn' ? "ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржЯрж╛ржЗржк ржХрж░рзБржи... (ржпрзЗржХрзЛржирзЛ ржнрж╛рж░рждрзАржпрж╝ ржнрж╛рж╖рж╛ржпрж╝)"
                                : activeLanguage === 'te' ? "р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐... (р░Пр░жр▒Ир░ир░╛ р░нр░╛р░░р░др▒Ар░п р░нр░╛р░╖р░▓р▒Л)"
                                : activeLanguage === 'ta' ? "роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН... (роОроирпНрод роЗроирпНродро┐роп роорпКро┤ро┐ропро┐ро▓рпБроорпН)"
                                : activeLanguage === 'gu' ? "ркдркорк╛рк░рлЛ рккрлНрк░рк╢рлНрки ркЕрк╣рлАркВ ркЯрк╛ркИркк ркХрк░рлЛ... (ркХрлЛркИрккркг ркнрк╛рк░ркдрлАркп ркнрк╛рк╖рк╛ркорк╛ркВ)"
                                : activeLanguage === 'mr' ? "рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рдпреЗрдереЗ рдЯрд╛рдЗрдк рдХрд░рд╛... (рдХреЛрдгрддреНрдпрд╛рд╣реА рднрд╛рд░рддреАрдп рднрд╛рд╖реЗрдд)"
                                : activeLanguage === 'kn' ? "р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐... (р▓пр▓╛р▓╡р│Бр▓жр│З р▓нр▓╛р▓░р▓др│Ар▓п р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐)"
                                : activeLanguage === 'ml' ? "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Зр┤╡р┤┐р┤Яр╡Ж р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х... (р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤нр┤╛р┤╖р┤пр┤┐р╡╜)"
                                : activeLanguage === 'pa' ? "риЖрикригри╛ ри╕ри╡ри╛ри▓ риЗрй▒риерйЗ риЯри╛риИрик риХри░рйЛ... (риХри┐ри╕рйЗ ри╡рйА ринри╛ри░ридрйА ринри╛ри╕ри╝ри╛ ри╡ри┐рй▒риЪ)"
                                : "Type your question here... (in any Indian language)"
                            }
                            disabled={isLoading}
                            className="pr-16"
                          />
                          <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center space-x-1">
                            <Badge variant="outline" className="text-xs">
                              <span className="mr-1">{getLanguageFlag(detectLanguage(input))}</span>
                              {getLanguageName(detectLanguage(input))}
                            </Badge>
                          </div>
                        </div>
                        
                        {/* Voice Input */}
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={isListening ? stopListening : startListening}
                          disabled={isLoading || !voiceEnabled}
                          className={isListening ? "bg-red-100 border-red-300" : ""}
                        >
                          {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                        </Button>
                        
                        {/* Send Button */}
                        <Button type="submit" disabled={isLoading || !input.trim()}>
                          <Send className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      {/* Enhanced Status Indicators */}
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <div className="flex items-center space-x-3">
                          {isListening && (
                            <div className="flex items-center text-red-600">
                              <div className="w-2 h-2 bg-red-600 rounded-full animate-pulse mr-1"></div>
                              {activeLanguage === 'hi' ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...' : 
                               activeLanguage === 'bn' ? 'рж╢рзБржиржЫрж┐...' :
                               activeLanguage === 'te' ? 'р░╡р░┐р░Вр░Яр▒Бр░ир▒Нр░ир░╛р░ир▒Б...' :
                               activeLanguage === 'ta' ? 'роХрпЗроЯрпНроЯрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН...' :
                               activeLanguage === 'gu' ? 'рк╕рк╛ркВркнрк│рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ...' :
                               activeLanguage === 'mr' ? 'рдРрдХрдд рдЖрд╣реЗ...' :
                               activeLanguage === 'kn' ? 'р▓Хр│Зр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж...' :
                               activeLanguage === 'ml' ? 'р┤Хр╡Зр╡╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...' :
                               activeLanguage === 'pa' ? 'ри╕рйБриг ри░ри┐ри╣ри╛ ри╣ри╛риВ...' :
                               'Listening...'}
                            </div>
                          )}
                          {isSpeaking && (
                            <div className="flex items-center text-blue-600">
                              <Volume2 className="w-3 h-3 mr-1" />
                              {activeLanguage === 'hi' ? 'рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдБ...' : 
                               activeLanguage === 'bn' ? 'ржмрж▓ржЫрж┐...' :
                               activeLanguage === 'te' ? 'р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...' :
                               activeLanguage === 'ta' ? 'рокрпЗроЪро┐роХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН...' :
                               activeLanguage === 'gu' ? 'ркмрлЛрк▓рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ...' :
                               activeLanguage === 'mr' ? 'рдмреЛрд▓рдд рдЖрд╣реЗ...' :
                               activeLanguage === 'kn' ? 'р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж...' :
                               activeLanguage === 'ml' ? 'р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...' :
                               activeLanguage === 'pa' ? 'римрйЛри▓ ри░ри┐ри╣ри╛ ри╣ри╛риВ...' :
                               'Speaking...'}
                            </div>
                          )}
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <span>
                            {activeLanguage === 'hi' ? 'AI рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд' : 
                             activeLanguage === 'bn' ? 'AI ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд' :
                             activeLanguage === 'te' ? 'AI р░жр▒Нр░╡р░╛р░░р░╛ р░ир░бр░┐р░Ър▒З' :
                             activeLanguage === 'ta' ? 'AI роорпВро▓роорпН роЗропроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ' :
                             activeLanguage === 'gu' ? 'AI ркжрлНрк╡рк╛рк░рк╛ рк╕ркВркЪрк╛рк▓рк┐ркд' :
                             activeLanguage === 'mr' ? 'AI рджреНрд╡рд╛рд░реЗ рдЪрд╛рд▓рд╡рд▓реЗ' :
                             activeLanguage === 'kn' ? 'AI р▓ир▓┐р▓Вр▓ж р▓ир▓бр│Жр▓╕р▓▓р│Нр▓кр▓бр│Бр▓др│Нр▓др▓жр│Ж' :
                             activeLanguage === 'ml' ? 'AI р┤╡р┤┤р┤┐ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б' :
                             activeLanguage === 'pa' ? 'AI рижрйБриЖри░ри╛ ри╕рй░риЪри╛ри▓ри┐рид' :
                             'Powered by AI'}
                          </span>
                          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Enhanced Chat Features */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
            <Card className="text-center p-4">
              <Languages className="w-8 h-8 text-primary mx-auto mb-2" />
              <h3 className="font-semibold mb-1">
                {activeLanguage === 'hi' ? '10+ рднрд╛рд╖рд╛рдПрдВ' : '10+ Languages'}
              </h3>
              <p className="text-xs text-muted-foreground">
                {activeLanguage === 'hi' 
                  ? 'рд╕рднреА рдкреНрд░рдореБрдЦ рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛'
                  : 'Support for all major Indian languages'
                }
              </p>
            </Card>
            
            <Card className="text-center p-4">
              <Mic className="w-8 h-8 text-primary mx-auto mb-2" />
              <h3 className="font-semibold mb-1">
                {activeLanguage === 'hi' ? 'рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрддрд╛' : 'Voice Support'}
              </h3>
              <p className="text-xs text-muted-foreground">
                {activeLanguage === 'hi' 
                  ? 'рдмреЛрд▓рдХрд░ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдФрд░ рдЙрддреНрддрд░ рд╕реБрдиреЗрдВ'
                  : 'Ask questions by voice and hear responses'
                }
              </p>
            </Card>
            
            <Card className="text-center p-4">
              <MessageCircle className="w-8 h-8 text-primary mx-auto mb-2" />
              <h3 className="font-semibold mb-1">
                {activeLanguage === 'hi' ? 'рд╕реНрдорд╛рд░реНрдЯ рд╕реБрдЭрд╛рд╡' : 'Smart Suggestions'}
              </h3>
              <p className="text-xs text-muted-foreground">
                {activeLanguage === 'hi' 
                  ? 'рд╕реНрдерд╛рди-рдЖрдзрд╛рд░рд┐рдд рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣'
                  : 'Location-based agricultural advice'
                }
              </p>
            </Card>

            <Card className="text-center p-4">
              <Bot className="w-8 h-8 text-primary mx-auto mb-2" />
              <h3 className="font-semibold mb-1">
                {activeLanguage === 'hi' ? 'AI рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ' : 'AI Expert'}
              </h3>
              <p className="text-xs text-muted-foreground">
                {activeLanguage === 'hi' 
                  ? 'рдЙрдиреНрдирдд AI рдореЙрдбрд▓ рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд'
                  : 'Powered by advanced AI models'
                }
              </p>
            </Card>
          </div>

          {/* Language Support Info */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Globe className="w-5 h-5 mr-2 text-primary" />
                Supported Languages / рд╕рдорд░реНрдерд┐рдд рднрд╛рд╖рд╛рдПрдВ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                {supportedLanguages.map((lang) => (
                  <div
                    key={lang.code}
                    className={`p-3 rounded-lg border text-center cursor-pointer transition-all ${
                      activeLanguage === lang.code 
                        ? 'border-primary bg-primary/10' 
                        : 'border-border hover:border-primary/50'
                    }`}
                    onClick={() => setActiveLanguage(lang.code)}
                  >
                    <div className="text-2xl mb-1">{lang.flag}</div>
                    <div className="font-medium text-sm">{lang.nativeName}</div>
                    <div className="text-xs text-muted-foreground">{lang.name}</div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </section>
  );
};

export default AIChatbot;